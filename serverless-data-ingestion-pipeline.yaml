AWSTemplateFormatVersion: '2010-09-09'
Description: A serverless data ingestion POC.
Resources:
  # S3 Buckets
  LandingZoneBucket:
    Type: AWS::S3::Bucket
    # DependsOn: 
    #   - LandingZoneBucketWatcherLambdaFunction
    Properties: 
      BucketName: data-lake-landingzone-bucket-poc
      # NotificationConfiguration:
      #   LambdaConfigurations:
      #   - Event: 's3:ObjectCreated:*'
      #     Function: !GetAtt LandingZoneBucketWatcherLambdaFunction.Arn
  DataLakeBucket:
    Type: AWS::S3::Bucket
    Properties: 
      BucketName: data-lake-bucket-poc
  ExceptionBucket:
    Type: AWS::S3::Bucket
    Properties: 
      BucketName: data-lake-exception-bucket-poc

  # Database Tables
  DataLakeCatalogDBTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - 
          AttributeName: "DS_Token"
          AttributeType: "S"
      KeySchema: 
        - 
          AttributeName: "DS_Token"
          KeyType: "HASH"
      ProvisionedThroughput: 
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      TableName: "DataLakeCatalogDB_POC"
  
  DataLakeLogEntryDBTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - 
          AttributeName: "LZ_S3_Object_Name"
          AttributeType: "S"
        - 
          AttributeName: "Timestamp"
          AttributeType: "S"
      KeySchema: 
        - 
          AttributeName: "LZ_S3_Object_Name"
          KeyType: "HASH"
        - 
          AttributeName: "Timestamp"
          KeyType: "RANGE"
      ProvisionedThroughput: 
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      TableName: "DataLakeLogEntryDB_POC"
            
  # Lambda Functions
  LandingZoneBucketWatcherLambdaFunction:
    Type: AWS::Lambda::Function
    DependsOn: 
      - LandingZoneBucket
      - DataLakeBucket
    Properties:
      Environment:
        Variables:
          DL_CATALOG_DB_NAME: !Ref DataLakeCatalogDBTable
          LZ_LOGENTRY_DB_NAME: !Ref DataLakeLogEntryDBTable
          DL_S3_BUCKET_NAME: !Ref DataLakeBucket
          DL_EXCEPTION_S3_BUCKET_NAME: !Ref ExceptionBucket
          LZ_S3_BUCKET_NAME: !Ref LandingZoneBucket
      Code: 
        S3Bucket: data-lake-reference-code
        S3Key: lambdas.zip
      Description: LandingZone Lambda Function
      Handler: landingzone-bucketwatcher-lambda.handler
      MemorySize: 128
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      Runtime: nodejs8.10
      Timeout: 300
  
  # IAM Roles
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    DependsOn: 
      - LandingZoneBucket
      - DataLakeBucket
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: DynamoDBAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Sid: s3access
            Effect: Allow
            Action: dynamodb:*
            Resource:
            - Fn::Join:
              - ''
              - - Fn::GetAtt:
                  - DataLakeCatalogDBTable
                  - Arn
                - "*"
            - Fn::Join:
              - ''
              - - Fn::GetAtt:
                  - DataLakeLogEntryDBTable
                  - Arn
                - "*"
      - PolicyName: S3Access
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Sid: s3access
            Effect: Allow
            Action: s3:*
            Resource:
            - Fn::Join:
              - ''
              - - Fn::GetAtt:
                  - LandingZoneBucket
                  - Arn
                - "*"
            - Fn::Join:
              - ''
              - - Fn::GetAtt:
                  - DataLakeBucket
                  - Arn
                - "*"
            - Fn::Join:
              - ''
              - - Fn::GetAtt:
                  - ExceptionBucket
                  - Arn
                - "*"
      - PolicyName: GlueAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Sid: gluePermissions
            Effect: Allow
            Action:
            - glue:CreateJob
            - glue:CreateTable
            - glue:StartCrawler
            - glue:CreateDatabase
            - glue:StartJobRun
            - glue:StopCrawler
            - glue:CreatePartition
            - glue:GetCrawler
            - glue:GetJob
            - glue:StartTrigger
            - glue:CreateCrawler
            Resource: "*"
      - PolicyName: LogAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Sid: writelogs
            Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          

  # Networking
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.1.0.0/16
      EnableDnsHostnames: true
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Sub DataLakeVpc-${AWS::StackName}
  PublicDataLakeVpcSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: 10.1.0.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: 
        Fn::Select: 
          - 0
          - Fn::GetAZs: ""
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Sub Public-DataLakeVpc-${AWS::StackName}
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Sub Public-DataLakeVpc-${AWS::StackName}
  Route:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref 'RouteTable'
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref 'InternetGateway'
  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PublicDataLakeVpcSubnet'
      RouteTableId: !Ref 'RouteTable'
  NetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
  InboundHTTPNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'NetworkAcl'
      RuleNumber: '100'
      Protocol: '-1'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
  OutboundHTTPNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'NetworkAcl'
      RuleNumber: '100'
      Protocol: '-1'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
  PublicDataLakeVpcSubnetNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref 'PublicDataLakeVpcSubnet'
      NetworkAclId: !Ref 'NetworkAcl'

  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - '*'
            Resource:
              - '*'
      RouteTableIds:
        - !Ref RouteTable
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcId: !Ref VPC
  

Outputs:
  LandingZoneBucketName:
    Description: This the bucket name of the DataLake LandingZone
    Value:
      Ref: LandingZoneBucket
  DataLakeBucketName:
    Description: This the bucket name of the DataLake
    Value:
      Ref: DataLakeBucket
  